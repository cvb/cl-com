(in-package :cl-com)

(defcstruct currency
  (lo :ulong)
  (hi :long))

(defun decode-vartype (vartype)
  (case vartype
    (:vt_ptr :pointer)
    (:vt_empty :void)
    (:vt_i2 :short)
    (:vt_i4 :long)
    (:vt_r4 :float)
    (:vt_r8 :double)
    (:vt_cy 'currency)
    (:vt_date 'date)
    (:vt_bstr 'bstr)
    (:vt_dispatch 'idispatch)
    (:vt_error 'scode)
    (:vt_bool :char)
    (:vt_variant :variant)
    (:vt_unknown 'iunknown)
    (:vt_decimal 'decimal)
    (:vt_i1 :char)
    (:vt_ui1 :uchar)
    (:vt_ui2 :ushort)
    (:vt_ui4 :ulong)
    (:vt_i8 :int64)
    (:vt_ui8 :uint64)
    (:vt_int :int)
    (:vt_uint :uint)
    (:vt_void :void)
    (:vt_hresult 'hresult)
    (:vt_ptr :pointer)
    (:vt_safearray :safearray)
    (:vt_carray :array)
    (:vt_userdefined :userdefined)
    (:vt_lpstr 'lpstr)
    (:vt_lpwstr 'lpwstr)
    (:vt_record :record)
    (:vt_int_ptr '(:pointer :int))
    (:vt_uint_ptr '(:pointer :uint))
    (:vt_clsid 'guid)
    (:vt_typemask :typemask)
    (t (error "unknows type"))))

(defun decode-typedesc (iinfo typedesc)
  (let ((result nil)
	(var-type (foreign-slot-value typedesc 'typedesc 'vt))
	(actual-desc (foreign-slot-value typedesc 'typedesc 'typedesc-union)))
    (case var-type
      (:vt_ptr (let ((type (decode-typedesc iinfo  actual-desc)))
		 `(:pointer ,type)))
      (:vt_carray (let ((elem-type (decode-typedesc iinfo actual-desc))
			(dims (foreign-slot-value actual-desc 'arraydesc 'cdims))
			(bounds-ptr (foreign-slot-pointer actual-desc 'arraydesc 'rgbounds)))
		    `(:array ,elem-type ,(iterate (for i to dims)
						  (collect (mem-aref bounds-ptr elem-type i))))))
      (:vt_userdefined (let ((ref-type-info (get-ref-type-info iinfo)))
			 (get-documentation ref-type-info)))
      (t (decode-vartype var-type)))))